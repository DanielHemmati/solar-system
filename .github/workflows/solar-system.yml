name: Solar System Workflow

# i will it will get trigger manually or when we push to main branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "feature/*"

env:
  MONGO_URI: "mongodb+srv://my_mongo_user:my_mongo_password@cluster0.v7ozr.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
  MONGO_USERNAME: "my_mongo_user"
  MONGO_PASSWORD: "my_mongo_password"
  creator: danielhemmati

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017

    env:
      MONGO_URI: "mongodb+srv://localhost:27017/superData"
      MONGO_USERNAME: "non-prod-user"
      MONGO_PASSWORD: "non-prod-password"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # this action will setup the nodejs and npm
      - name: Setup NodeJS Version
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM deps
        uses: actions/cache@v4
        with:
          path: node_modules
          # this is so cool
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        # we only want the archive if the last step failed, not always
        if: failure()
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    container:
      image: node:20

    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options: --name mongo

    env:
      MONGO_URI: "mongodb+srv://mongo:27017/superData"
      MONGO_USERNAME: "non-prod-user"
      MONGO_PASSWORD: "non-prod-password"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 20

      - name: Cache NPM deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: check code coverage
        # it doesn't matter if it fails continue
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker:
    runs-on: ubuntu-latest
    name: Containerizaition
    needs: [unit-testing, code-coverage]
    permissions:
      # contents is by default is to read
      contents: read
      packages: write # this is necessary
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to github container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # DanielHemmati
          password: ${{ secrets.GITHUB_TOKEN }} # this is enough

      - name: Docker image testig
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      # i rather to do this on my own machine
      - name: Docker image testing
        run: |
          docker images
          docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI="${{ env.MONGO_URI }}" \
              -e MONGO_USERNAME="${{ env.MONGO_USERNAME }}"  \
              -e MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing image url using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      # push to both docker hub and github contianer registry
      - name: Container registry push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} 
            ghcr.io/${{ env.creator }}/solar-systme:${{ github.sha }}

  dev-deploy:
    # if: contains(github.ref, 'feature/ ')
    needs: docker
    uses: ./.github/workflows/reusable-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}


  # integration-testing:
  #   runs-on: ubuntu-latest
  #   needs: dev-deploy
  #   if: contains(github.ref, 'feature/')

  #   steps:
  #     - name: Test Url output using curl
  #       env:
  #         IP: ${{ needs.dev-deploy.outputs.LB_IP }}
  #       run: |
  #         curl -s http://$IP | grep nginx
